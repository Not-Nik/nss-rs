#![deny(warnings)]

use neqo_crypto::constants::*;
use neqo_crypto::hkdf;
use neqo_crypto::hp;
use neqo_crypto::init_db;

fn make_hp(cipher: Cipher) -> hp::HpKey {
    let ikm = hkdf::import_key(TLS_VERSION_1_3, cipher, &[0; 16]).expect("import IKM");
    let prk = hkdf::extract(TLS_VERSION_1_3, cipher, None, &ikm).expect("extract works");
    hp::extract_hp(TLS_VERSION_1_3, cipher, &prk, "hp").expect("extract label works")
}

#[test]
fn aes128() {
    init_db("./db");
    let mask = make_hp(TLS_AES_128_GCM_SHA256)
        .mask(&[0; 16])
        .expect("should produce a mask");
    const EXPECTED: &[u8] = &[
        0x04, 0x7b, 0xda, 0x65, 0xc3, 0x41, 0xcf, 0xbc, 0x5d, 0xe1, 0x75, 0x2b, 0x9d, 0x7d, 0xc3,
        0x14,
    ];
    assert_eq!(mask, EXPECTED);
}

#[test]
fn aes256() {
    init_db("./db");
    let mask = make_hp(TLS_AES_256_GCM_SHA384)
        .mask(&[0; 16])
        .expect("should produce a mask");
    const EXPECTED: &[u8] = &[
        0xb5, 0xea, 0xa2, 0x1c, 0x25, 0x77, 0x48, 0x18, 0xbf, 0x25, 0xea, 0xfa, 0xbd, 0x8d, 0x80,
        0x2b,
    ];
    assert_eq!(mask, EXPECTED);
}

#[cfg(feature = "chacha")]
#[test]
fn chacha20_ctr() {
    init_db("./db");
    let mask = make_hp(TLS_CHACHA20_POLY1305_SHA256)
        .mask(&[0; 16])
        .expect("should produce a mask");
    const EXPECTED: &[u8] = &[
        0xb3, 0x9e, 0xb8, 0xa5, 0x9b, 0x37, 0x25, 0x2a, 0xcd, 0xc2, 0xae, 0x9d, 0x91, 0x2c, 0xff,
        0x3f, 0x24, 0x32, 0xc5, 0xbb, 0x5d, 0x32, 0xa5, 0xed, 0x1a, 0x30, 0x7a, 0x6e, 0xec, 0x7f,
        0x72, 0xb7, 0x5e, 0x67, 0xc6, 0x7a, 0x8c, 0x08, 0xb3, 0xbd, 0x8a, 0xf1, 0xef, 0x74, 0x1d,
        0x86, 0x55, 0x3e, 0x0e, 0x60, 0x43, 0xc4, 0xd2, 0xd5, 0x92, 0xe9, 0xe0, 0x25, 0xa7, 0xfb,
        0xc7, 0x0b, 0xb8, 0xfa,
    ];
    assert_eq!(mask, EXPECTED);
}
